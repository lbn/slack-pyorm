#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json
from datetime import datetime
from glob import glob
import os.path

from pony.orm import db_session

import models

# Users
def import_user(u):
    user = {
        "id": u["id"],
        "deleted": u["deleted"],
        "username": u["name"]
    }
    for k in ("is_admin", "is_bot", "is_owner", "email",):
        if k in u:
            user[k] = u[k]

    for pk in ("first_name", "last_name",):
        if pk in u["profile"]:
            user[pk] = u["profile"][pk]

    models.User(**user)

def users(filepath):
    f = open(filepath)
    users = json.load(f)
    f.close()

    nonunique_skipped = 0
    for user in users:
        try:
            import_user(user)
        except:
            nonunique_skipped += 1

    print("Imported {} out of {} users".format(len(users)-nonunique_skipped, len(users)))

# Channels
def import_channel(c):
    chan = {
        "id": c["id"],
        "name": c["name"],
        "purpose_text": c["purpose"]["value"],
        "topic_text": c["topic"]["value"],
        "created": datetime.fromtimestamp(c["created"]),
        "creator": models.User.get(id=c["creator"])
    }

    dchan = models.Channel(**chan)
    for member_id in c["members"]:
        u = models.User.get(id=member_id)
        dchan.members.add(u)


def channels(filepath):
    f = open(filepath)
    channels = json.load(f)
    f.close()

    nonunique_skipped = 0
    for chan in channels:
        try:
            import_channel(chan)
        except:
            nonunique_skipped += 1

    print("Imported {} out of {} channels".format(len(channels)-nonunique_skipped, len(channels)))


# Messages
def import_message(channel_name, m):
    msg = {
        "type": m["type"],
        "timestamp": datetime.fromtimestamp(float(m["ts"])),
        "channel": models.Channel.get(name=channel_name)
    }

    if "user" in m:
        msg["user"] = models.User.get(id=m["user"])

    for k in ("subtype", "upload", "bot_id", "text",):
        if k in m:
            msg[k] = m[k]

    models.Message(**msg)

def messages_channel(filepath):
    f = open(filepath)
    messages = json.load(f)
    f.close()
    channel_name = os.path.split(filepath)[-1].split(".")[0]

    nonunique_skipped = 0
    for msg in messages:
        try:
            import_message(channel_name, msg)
        except:
            nonunique_skipped += 1

    imported = len(messages) - nonunique_skipped
    print("Imported {} messages from channel {}".format(imported, channel_name))

def messages(ddir):
    for f in glob(os.path.join(ddir, "*.json")):
        messages_channel(f)


@db_session
def main():
    parser = argparse.ArgumentParser(
        description="Import Slack data from slack-exporter directory",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--data",
        type=str,
        metavar="DATADIR",
        default="./data",
        help="Data directory where slack-exporter saved channel, user and message JSON data")

    parser.add_argument("--users", action="store_true")
    parser.add_argument("--channels", action="store_true")
    parser.add_argument("--messages", action="store_true")

    args = parser.parse_args()
    if not any([args.users, args.channels, args.messages]):
        users(os.path.join(args.data, "users.json"))
        channels(os.path.join(args.data, "channels.json"))
        messages(os.path.join(args.data, "logs"))
    else:
        if args.users:
            users(os.path.join(args.data, "users.json"))
        if args.channels:
            channels(os.path.join(args.data, "channels.json"))
        if args.messages:
            messages(os.path.join(args.data, "logs"))

if __name__ == "__main__":
    main()
